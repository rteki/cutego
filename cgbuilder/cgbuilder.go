package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"tmpwriter"
	"path"
)

type globalsT struct {
	//root path of qml resources
	QrcRoot string `json:"qrcRoot"`
	//root path of qt (aka {QT_INSTALL_PATH}/Qt{QT_VERSION}/{QT_VERSION}/${COMPILER_NAME})
	QtPath string `json:"qtPath"`
	//QT Tools root path of qt (aka {QT_INSTALL_PATH}/Qt{QT_VERSION}/Tools/${COMPILER_NAME})
	QtToolsPath string `json:"qtToolsPath"`
	//Golang compiller root path
	GoInstallPath string `json:"goInstallPath"`
	//final build destination path
	BuildDest string `json:"buildDest"`
	//name of Go main package
	MainGoName string `json:"mainGoName"`
	//path to directory for qt autogenerated files
	TmpDirPath string `json:"tmpDirPath"`
}

//Globals is a main build configuration
var Globals globalsT
var TW *tmpwriter.TmpWriter
var EOL string = "\r\n"

func readGlobals() globalsT {
	var g globalsT

	configFile, err := os.Open("./cgbuilder_config.json")

	if err != nil {
		fmt.Println(err)
	}
	defer configFile.Close()

	bytes, _ := ioutil.ReadAll(configFile)

	json.Unmarshal([]byte(bytes), &g)

	return g
}

func getFlags() map[string]bool{
	
	args := map[string]bool {
		"res": false,
		"clean": false,
		"cleanall": false,
	}
	
	for i := 1; i < len(os.Args); i++ {
		args[os.Args[i]] = true
	}

	return args

}



func main() {
	flags := getFlags()
	Globals = readGlobals()
	TW = new(tmpwriter.TmpWriter)
	
	pwd, _ := os.Getwd()

	if !flags["clean"] && !flags["cleanall"] {
		if !flags["res"] {
			CreateDir(Globals.TmpDirPath)
			
			
			ioutil.WriteFile(path.Join(GetAbsPath(pwd, Globals.TmpDirPath), "CuteGo.pro"), []byte(generateProfile()), 0644)

			buildQt(path.Join(GetAbsPath(pwd, Globals.TmpDirPath), "CuteGo.pro"))

			buildGo()
			deploy()
		}

		TW.ExecInDir(Globals.QrcRoot, "resources.qrc", generateQrc)
		
		buildResources()

	} else {
		cleanWorkspace()
		if flags["cleanall"] {
			cleanBuildDest()
		}
	}
	
}